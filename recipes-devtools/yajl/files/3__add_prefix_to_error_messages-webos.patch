commit 1a04c075d33197295f02dc6f0611c3ddec6ae1eb
Author: Vitali Lovich <vitali.lovich@palm.com>
Date:   Tue Nov 3 13:48:42 2009 -0800

    Add ability to print a prefix when printing the error (helps when
    logging to make things align nicely in the output).

diff --git a/src/api/yajl_parse.h b/src/api/yajl_parse.h
index 40998bc..dd94edf 100644
--- a/src/api/yajl_parse.h
+++ b/src/api/yajl_parse.h
@@ -169,6 +169,25 @@ extern "C" {
                                             const unsigned char * jsonText,
                                             unsigned int jsonTextLength);
 
+    /** get an error string describing the state of the
+     *  parse.
+     *
+     *  If verbose is non-zero, the message will include the JSON
+     *  text where the error occured, along with an arrow pointing to
+     *  the specific char.
+     *
+     *  A dynamically allocated string will be returned which should
+     *  be freed with yajl_free_error 
+     *
+     *  This extension pads all newlines by a certain UTF-8 string
+     *  (for pretty prettier printing in logs).
+     */
+    unsigned char * YAJL_API yajl_get_error_ex(yajl_handle hand, int verbose,
+                                            const unsigned char * jsonText,
+                                            unsigned int jsonTextLength,
+                                            const char *padding);
+
+
     /** free an error returned from yajl_get_error */
     void YAJL_API yajl_free_error(yajl_handle hand, unsigned char * str);
 
diff --git a/src/yajl.c b/src/yajl.c
index fe7d05e..954aa88 100644
--- a/src/yajl.c
+++ b/src/yajl.c
@@ -139,9 +139,17 @@ unsigned char *
 yajl_get_error(yajl_handle hand, int verbose,
                const unsigned char * jsonText, unsigned int jsonTextLen)
 {
-    return yajl_render_error_string(hand, jsonText, jsonTextLen, verbose);
+    return yajl_render_error_string(hand, jsonText, jsonTextLen, NULL, verbose);
 }
 
+unsigned char *
+yajl_get_error_ex(yajl_handle hand, int verbose,
+               const unsigned char * jsonText, unsigned int jsonTextLen, const char * padding)
+{
+    return yajl_render_error_string(hand, jsonText, jsonTextLen, (const unsigned char *)padding, verbose);
+}
+
+
 void
 yajl_free_error(yajl_handle hand, unsigned char * str)
 {
diff --git a/src/yajl_parser.c b/src/yajl_parser.c
index 7a52df4..d93b30d 100644
--- a/src/yajl_parser.c
+++ b/src/yajl_parser.c
@@ -46,7 +46,8 @@
 
 unsigned char *
 yajl_render_error_string(yajl_handle hand, const unsigned char * jsonText,
-                         unsigned int jsonTextLen, int verbose)
+                         unsigned int jsonTextLen, const unsigned char *padding,
+                         int verbose)
 {
     unsigned int offset = hand->errorOffset;
     unsigned char * str;
@@ -54,6 +55,10 @@ yajl_render_error_string(yajl_handle hand, const unsigned char * jsonText,
     const char * errorText = NULL;
     char text[72];
     const char * arrow = "                     (right here) ------^\n";    
+    unsigned int paddingLen = (padding != NULL ? strlen((const char *)padding) : 0);
+
+    if (yajl_bs_current(hand->stateStack) == yajl_state_parse_complete)
+        return NULL;
 
     if (yajl_bs_current(hand->stateStack) == yajl_state_parse_error) {
         errorType = "parse";
@@ -67,6 +72,7 @@ yajl_render_error_string(yajl_handle hand, const unsigned char * jsonText,
 
     {
         unsigned int memneeded = 0;
+        memneeded += paddingLen;
         memneeded += strlen(errorType);
         memneeded += strlen(" error");
         if (errorText != NULL) {
@@ -75,6 +81,9 @@ yajl_render_error_string(yajl_handle hand, const unsigned char * jsonText,
         }
         str = (unsigned char *) YA_MALLOC(&(hand->alloc), memneeded + 2);
         str[0] = 0;
+        if (paddingLen) {
+            strcat((char *)str, (char *)padding);
+        }
         strcat((char *) str, errorType);
         strcat((char *) str, " error");    
         if (errorText != NULL) {
@@ -112,11 +121,17 @@ yajl_render_error_string(yajl_handle hand, const unsigned char * jsonText,
         {
             char * newStr = (char *)
                 YA_MALLOC(&(hand->alloc), (strlen((char *) str) +
+                                           paddingLen +
                                            strlen((char *) text) +
+                                           paddingLen +
                                            strlen(arrow) + 1));
             newStr[0] = 0;
             strcat((char *) newStr, (char *) str);
+            if (paddingLen)
+                strcat((char *) newStr, (char *)padding);
             strcat((char *) newStr, text);
+            if (paddingLen)
+                strcat((char *) newStr, (char *)padding);
             strcat((char *) newStr, arrow);    
             YA_FREE(&(hand->alloc), str);
             str = (unsigned char *) newStr;
diff --git a/src/yajl_parser.h b/src/yajl_parser.h
index 92b4a40..4cc5d25 100644
--- a/src/yajl_parser.h
+++ b/src/yajl_parser.h
@@ -73,7 +73,8 @@ yajl_do_parse(yajl_handle handle, unsigned int * offset,
 
 unsigned char *
 yajl_render_error_string(yajl_handle hand, const unsigned char * jsonText,
-                         unsigned int jsonTextLen, int verbose);
+                         unsigned int jsonTextLen, const unsigned char *padding,
+                         int verbose);
 
 
 #endif
